diff --git a/frameworks/native/include/executor/memory/memory_util.h b/frameworks/native/include/executor/memory/memory_util.h
index e718e5ce7e0288d0bf6adf4b9d447969e51da15a..33f011910848d4e02fdfe81b14e11c3e0825e953 100644
--- a/frameworks/native/include/executor/memory/memory_util.h
+++ b/frameworks/native/include/executor/memory/memory_util.h
@@ -52,6 +52,8 @@ public:
     bool GetTypeAndValue(const std::string &str, std::string &type, uint64_t &value);
     void SetMemTotalValue(const std::string &value, std::vector<std::string> &lines, std::vector<std::string> &values,
         bool flag = false);
+    std::string PermToString(const uint64_t iPerm);
+    uint64_t PermToInt(const std::string& perm);
 
 private:
 };
diff --git a/frameworks/native/include/executor/memory/parse/meminfo_data.h b/frameworks/native/include/executor/memory/parse/meminfo_data.h
index 9bf74288f20429bdd67d93ecaf7dd89bdeaf751b..1c48a67062bb35f062cddcca8c3a2c7fc0e62bae 100644
--- a/frameworks/native/include/executor/memory/parse/meminfo_data.h
+++ b/frameworks/native/include/executor/memory/parse/meminfo_data.h
@@ -50,6 +50,7 @@ public:
         std::string name;
         std::string start;
         std::string end;
+        std::string perm;
         uint64_t size;
         uint64_t counts;
     };
diff --git a/frameworks/native/src/executor/memory/memory_util.cpp b/frameworks/native/src/executor/memory/memory_util.cpp
index ac16de8d9326a44a7d02e9ac4375be7bfec64b12..1717004f2a97259c25df897b2ea62e24d8066762 100644
--- a/frameworks/native/src/executor/memory/memory_util.cpp
+++ b/frameworks/native/src/executor/memory/memory_util.cpp
@@ -206,5 +206,34 @@ void MemoryUtil::SetMemTotalValue(const string &value, vector<string> &lines, ve
     }
     values.push_back(tempValue);
 }
+
+string MemoryUtil::PermToString(const uint64_t iPerm)
+{
+    string perm = "";
+    const string permValue = "rwxp";
+    for (int i = 0; i < permValue.size(); i++)
+    {
+        if ((iPerm & (1 << i)) == (1 << i)) {
+            perm += permValue[i];
+        } else if (i == permValue.size()-1){
+            perm += "s";
+        } else {
+            perm += "-";
+        }
+    }
+    return perm;
+}
+
+uint64_t MemoryUtil::PermToInt(const string& perm)
+{
+    uint64_t iPerm = 0;
+    for (int i = 0; i < perm.size(); i++)
+    {
+        if (perm[i] != '-' && perm[i] != 's') {
+            iPerm |= (1 << i);
+        }
+    }
+    return iPerm;
+}
 } // namespace HiviewDFX
 } // namespace OHOS
diff --git a/frameworks/native/src/executor/memory/parse/parse_smaps_info.cpp b/frameworks/native/src/executor/memory/parse/parse_smaps_info.cpp
index 9c3483d485c6590816e033644675be5dcc7e6c50..48803cd3660be20a5c319da3a50769a99e2ac82f 100644
--- a/frameworks/native/src/executor/memory/parse/parse_smaps_info.cpp
+++ b/frameworks/native/src/executor/memory/parse/parse_smaps_info.cpp
@@ -128,6 +128,7 @@ void ParseSmapsInfo::SetMapByNameLine(const string &group, const string &content
     string endVal = startAndEnd.back();
     memMap_.insert(pair<string, string>("Start", startVal));
     memMap_.insert(pair<string, string>("End", endVal));
+    memMap_.insert(pair<string, string>("Perm", datas.at(1)));
 }
 
 bool ParseSmapsInfo::ShowSmapsData(const MemoryFilter::MemoryType &memType, const int &pid, GroupMap &result,
@@ -153,6 +154,10 @@ bool ParseSmapsInfo::ShowSmapsData(const MemoryFilter::MemoryType &memType, cons
             if (result.find(memGroup_) != result.end()) {
                 result[memGroup_]["Counts"]++;
             } else {
+                vector<string> datas;
+                StringUtils::GetInstance().StringSplit(line, " ", datas);
+                result[memGroup_].insert(pair<string, uint64_t>("Perm",
+                                                                MemoryUtil::GetInstance().PermToInt(datas.at(1))));
                 result[memGroup_].insert(pair<string, uint64_t>("Counts", 1));
                 result[memGroup_].insert(pair<string, uint64_t>("Name", 0));
             }
diff --git a/frameworks/native/src/executor/memory/smaps_memory_info.cpp b/frameworks/native/src/executor/memory/smaps_memory_info.cpp
index e7792a4ce99752529fcb560ea1aa9f05163f9079..6c22baf6ea6e3741ae7c0605ebe38ffabea3cf16 100644
--- a/frameworks/native/src/executor/memory/smaps_memory_info.cpp
+++ b/frameworks/native/src/executor/memory/smaps_memory_info.cpp
@@ -148,7 +148,13 @@ void SmapsMemoryInfo::BuildSmapsResult(const GroupMap &infos, StringMatrix resul
             auto it = valueMap.find(tag);
             string value = "0";
             if (it != valueMap.end()) {
-                value = StringUtils::GetInstance().IsSameStr(tag, "Name") ? info.first : to_string(it->second);
+                if (StringUtils::GetInstance().IsSameStr(tag, "Name")) {
+                    value = info.first;
+                } else if (StringUtils::GetInstance().IsSameStr(tag, "Perm")) {
+                    value = MemoryUtil::GetInstance().PermToString(it->second);
+                } else {
+                    value = to_string(it->second);
+                }
             }
             if (StringUtils::GetInstance().IsSameStr(tag, "Name")) {
                 string space = " ";
@@ -212,6 +218,7 @@ void SmapsMemoryInfo::CalcSmapsGroup(const GroupMap &infos, StringMatrix result,
     MemoryUtil::GetInstance().SetMemTotalValue(to_string(memSmapsInfo.swapPss), lines, values, true);
     if (!isShowSmapsInfo) {
         MemoryUtil::GetInstance().SetMemTotalValue(to_string(memSmapsInfo.counts), lines, values, true);
+        MemoryUtil::GetInstance().SetMemTotalValue("", lines, values, true);
     } else {
         MemoryUtil::GetInstance().SetMemTotalValue("", lines, values, true);
         MemoryUtil::GetInstance().SetMemTotalValue("", lines, valu