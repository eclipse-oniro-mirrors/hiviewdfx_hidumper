diff --git a/client/native/dump_client_main.cpp b/client/native/dump_client_main.cpp
index ccef1d9..06f2b91 100755
--- a/client/native/dump_client_main.cpp
+++ b/client/native/dump_client_main.cpp
@@ -65,6 +65,7 @@ int DumpClientMain::Main(int argc, char* argv[], int outFd)
     auto& dumpManagerClient = DumpManagerClient::GetInstance();
     if (dumpManagerClient.Connect() != ERR_OK) {
         (void)dprintf(outFd, "connect error\n");
+        DUMPER_HILOGE(MODULE_SERVICE, "connect error.");
         return -1;
     }
     DumpUtils::IgnoreStdoutCache();
@@ -72,11 +73,13 @@ int DumpClientMain::Main(int argc, char* argv[], int outFd)
     if (ret < DumpStatus::DUMP_OK) {
         if (ret != DumpStatus::DUMP_INVALID_ARG) {
             (void)dprintf(outFd, "request error\n");
+            DUMPER_HILOGE(MODULE_SERVICE, "request error.");
         }
         return ret;
     }
     if (!dumpManagerClient.IsConnected()) {
         (void)dprintf(outFd, "service error\n");
+        DUMPER_HILOGE(MODULE_SERVICE, "service error.");
     }
     return ret;
 }
diff --git a/services/native/src/dump_manager_client.cpp b/services/native/src/dump_manager_client.cpp
index 6061c8e..36f88ee 100644
--- a/services/native/src/dump_manager_client.cpp
+++ b/services/native/src/dump_manager_client.cpp
@@ -38,15 +38,18 @@ DumpManagerClient::~DumpManagerClient()
 int32_t DumpManagerClient::Request(std::vector<std::u16string> &args, int outfd)
 {
     if ((args.size() < 1) || (outfd < 0)) {
+        DUMPER_HILOGE(MODULE_CLIENT, "args or outfd failed.");
         return DumpStatus::DUMP_FAIL;
     }
     for (size_t i = 0; i < args.size(); i++) {
         std::string trimArg = TrimStr(Str16ToStr8(args[i]));
         if (strlen(trimArg.c_str()) < 1) {
+            DUMPER_HILOGE(MODULE_CLIENT, "trimArg empty.");
             return DumpStatus::DUMP_FAIL;
         }
     }
     if (Connect() != ERR_OK) {
+        DUMPER_HILOGE(MODULE_CLIENT, "Connect failed.");
         return DumpStatus::DUMP_FAIL;
     }
     int32_t ret = proxy_->Request(args, outfd);
@@ -58,24 +61,29 @@ ErrCode DumpManagerClient::Connect()
 {
     std::lock_guard<std::mutex> lock(mutex_);
     if (proxy_ != nullptr) {
+        DUMPER_HILOGE(MODULE_CLIENT, "proxy_ is nullptr.");
         return ERR_OK;
     }
     sptr<ISystemAbilityManager> sam = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
     if (sam == nullptr) {
+        DUMPER_HILOGE(MODULE_CLIENT, "sam is nullptr.");
         return ERROR_GET_SYSTEM_ABILITY_MANAGER;
     }
     sptr<IRemoteObject> remoteObject = sam->CheckSystemAbility(DFX_SYS_HIDUMPER_ABILITY_ID);
     if (remoteObject == nullptr) {
         ErrCode retStart = OnDemandStart(sam, remoteObject);
         if (remoteObject == nullptr || retStart != ERR_OK) {
+            DUMPER_HILOGE(MODULE_CLIENT, "remoteObject is nullptr.");
             return ERROR_GET_DUMPER_SERVICE;
         }
     }
     deathRecipient_ = sptr<IRemoteObject::DeathRecipient>(new DumpManagerDeathRecipient());
     if (deathRecipient_ == nullptr) {
+        DUMPER_HILOGE(ERR_NO_MEMORY, "remoteObject is nullptr.");
         return ERR_NO_MEMORY;
     }
     if ((remoteObject->IsProxyObject()) && (!remoteObject->AddDeathRecipient(deathRecipient_))) {
+        DUMPER_HILOGE(ERR_NO_MEMORY, "IsProxyObject failed.");
         return ERROR_ADD_DEATH_RECIPIENT;
     }
     proxy_ = iface_cast<IDumpBroker>(remoteObject);
